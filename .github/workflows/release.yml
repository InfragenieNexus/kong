name: Package & Release

# The workflow to build and release official Kong packages and images.

on:  # yamllint disable-line rule:truthy
  pull_request:
    paths:
    - '**/*.rockspec'
    - 'build/**'
    - 'BUILD.bazel'
    - '.requirements'
    - '.github/workflows/release.yml'
    - '.github/matrix-*.yml'
    - 'spec-ee/kong-api-tests/**'
    - 'kong/**'
    - 'plugins-ee/**'
  push:
    branches:
    - master
    - next/*
    - release/*
  workflow_dispatch:
    inputs:
      official:
        description: 'Official release?'
        required: true
        type: boolean
        default: false
      version:
        description: 'Release version, e.g. `3.0.0.0-beta.2`'
        required: true
        type: string

# `commit-ly` is a flag that indicates whether the build should be run per commit.

env:
  # official release repo
  DOCKER_REPOSITORY: kong/kong-gateway
  PRERELEASE_DOCKER_REPOSITORY: kong/kong-gateway-dev
  LEGACY_PRERELEASE_DOCKER_REPOSITORY: kong/kong-gateway-internal
  FULL_RELEASE: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

  # only for pr
  GHA_CACHE: ${{ github.event_name == 'pull_request' }}

  HAS_ACCESS_TO_GITHUB_TOKEN: ${{ github.repository_owner == 'Kong' }}


jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest-kong
    outputs:
      kong-version: ${{ steps.build-info.outputs.kong-version }}
      prerelease-docker-repository: ${{ env.PRERELEASE_DOCKER_REPOSITORY }}
      docker-repository: ${{ steps.build-info.outputs.docker-repository }}
      release-desc: ${{ steps.build-info.outputs.release-desc }}
      release-label: ${{ steps.build-info.outputs.release-label || '' }}
      deploy-environment: ${{ steps.build-info.outputs.deploy-environment }}
      matrix: ${{ steps.build-info.outputs.matrix }}
      gh-release-name: ${{ steps.build-info.outputs.gh-release-name }}
      gh-release-tag-name: ${{ steps.build-info.outputs.gh-release-tag-name }}
      release-runs-on: ${{ steps.build-info.outputs.release-runs-on }}
      # use github.event.pull_request.head.sha instead of github.sha on a PR, as github.sha on PR is the merged commit (temporary commit)
      commit-sha: ${{ github.event.pull_request.head.sha || github.sha }}

    steps:
    - uses: actions/checkout@v3
    - name: Build Info
      id: build-info
      run: |
        KONG_VERSION=$(bash scripts/grep-kong-version.sh)
        echo "kong-version=$KONG_VERSION" >> $GITHUB_OUTPUT

        if [ "${{ github.event_name == 'schedule' }}" == "true" ]; then
          echo "release-label=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT
        fi

        matrix_file=".github/matrix-commitly.yml"
        if [ "$FULL_RELEASE" == "true" ]; then
          matrix_file=".github/matrix-full.yml"
        fi

        # for official releases, the GH release title is "Kong Gateway <version>
        # tag name is <version>
        echo "gh-release-name=Kong Enterprise ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "gh-release-tag-name=${{ github.ref_name }}" >> $GITHUB_OUTPUT

        # nightly releases also get a tag (single `nightly` tag is deleted and pushed daily)
        if [ "${{ github.event.inputs.version }}" == "nightly" ]; then
          echo "gh-release-name=Kong Enterprise Nightly" >> $GITHUB_OUTPUT
          echo "gh-release-tag-name=nightly" >> $GITHUB_OUTPUT
          echo "release-label=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT
        fi

        if [ "${{ github.event.inputs.official }}" == "true" ]; then
          release_desc="$KONG_VERSION (official)"
          echo "docker-repository=$DOCKER_REPOSITORY" >> $GITHUB_OUTPUT
          echo "deploy-environment=release" >> $GITHUB_OUTPUT
        else
          release_desc="$KONG_VERSION (pre-release)"
          echo "docker-repository=$PRERELEASE_DOCKER_REPOSITORY" >> $GITHUB_OUTPUT
        fi

        echo "release-desc=$release_desc" >> $GITHUB_OUTPUT

        if [ "${{ env.FULL_RELEASE }}" == "true" ]; then
          echo "deploy-environment=release" >> $GITHUB_OUTPUT
        fi

        echo "matrix=$(yq e -I=0 -o=json $matrix_file)" >> $GITHUB_OUTPUT

        echo "release-runs-on=${{ github.event_name == 'pull_request' && 'ubuntu-latest-kong' || vars.RELEASE_RUNS_ON }}" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT

        echo "### :package: Building and packaging for $release_desc" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY
        echo '- event_name: ${{ github.event_name }}' >> $GITHUB_STEP_SUMMARY
        echo '- ref_name: ${{ github.ref_name }}' >> $GITHUB_STEP_SUMMARY
        echo '- inputs.version: ${{ github.event.inputs.version }}' >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  build-packages:
    needs: metadata
    name: Build & Package - ${{ matrix.label }}
    environment: ${{ needs.metadata.outputs.deploy-environment }}

    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-packages'] }}"

    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    container:
      image: ${{ matrix.image }}
      options: --privileged

    steps:
    - name: Early Rpm Setup
      if: matrix.package == 'rpm' && matrix.image != ''
      run: |
        # tar/gzip is needed to restore git cache (if available)
        yum install -y tar gzip which file zlib-devel

    - name: Early Deb in Container Setup
      if: matrix.package == 'deb' && matrix.image != ''
      run: |
        # tar/gzip is needed to restore git cache (if available)
        apt-get update
        apt-get install -y git tar gzip file sudo

    - name: Cache Git
      id: cache-git
      if: (matrix.package == 'rpm' || matrix.image == 'debian:10') && matrix.image != ''
      uses: actions/cache@v3
      with:
        path: /usr/local/git
        key: ${{ matrix.label }}-git-2.41.0

    # el-7,8, amazonlinux-2,2023, debian-10 doesn't have git 2.18+, so we need to install it manually
    - name: Install newer Git
      if: (matrix.package == 'rpm' || matrix.image == 'debian:10') && matrix.image != '' && steps.cache-git.outputs.cache-hit != 'true'
      run: |
        if which apt 2>/dev/null; then
          apt update
          apt install -y wget libz-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext make gcc autoconf sudo
        else
          yum update -y
          yum groupinstall -y 'Development Tools'
          yum install -y wget zlib-devel openssl-devel curl-devel expat-devel gettext-devel perl-CPAN perl-devel
        fi
        wget -nv https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.41.0.tar.gz
        tar xf git-2.41.0.tar.gz
        cd git-2.41.0

        # https://gitlab.com/gitlab-org/omnibus-gitlab/-/merge_requests/5948/diffs
        if [[ ${{ matrix.image }} == "centos:7" ]]; then
          echo 'CFLAGS=-std=gnu99' >> config.mak
        fi

        make configure
        ./configure --prefix=/usr/local/git
        make -j$(nproc)
        make install

    - name: Add Git to PATH
      if: (matrix.package == 'rpm' || matrix.image == 'debian:10') && matrix.image != ''
      run: |
        echo "/usr/local/git/bin" >> $GITHUB_PATH

    - name: Debian Git dependencies
      if: matrix.image == 'debian:10'
      run: |
        apt update
        # dependencies for git
        apt install -y wget libz-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev sudo

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Swap git with https
      run: git config --global url."https://github".insteadOf git://github

    - name: Generate build cache key
      id: cache-key
      if: env.GHA_CACHE == 'true'
      uses: ./.github/actions/build-cache-key
      with:
        prefix: ${{ matrix.label }}-build
        extra: |
          ${{ hashFiles('kong/**') }}

    - name: Cache Packages
      id: cache-deps
      if: env.GHA_CACHE == 'true'
      uses: actions/cache@v3
      with:
        path: bazel-bin/pkg
        key: ${{ steps.cache-key.outputs.cache-key }}

    - name: Set .requirements into environment variables
      run: |
        grep -v '^#' .requirements >> $GITHUB_ENV

    - name: Setup Bazel
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: bazelbuild/setup-bazelisk@95c9bf48d0c570bb3e28e57108f3450cd67c1a44 # v2.0.0

    - name: Install Deb Build Dependencies
      if: matrix.package == 'deb' && steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
                automake \
                build-essential \
                curl \
                file \
                libyaml-dev \
                m4 \
                perl \
                pkg-config \
                unzip \
                zlib1g-dev

    - name: Install Deb Cross Build Dependencies (arm64)
      if: matrix.package == 'deb' && steps.cache-deps.outputs.cache-hit != 'true' && endsWith(matrix.label, 'arm64')
      run: |
        sudo apt-get install crossbuild-essential-arm64 -y

    - name: Install Rpm Build Dependencies
      if: matrix.package == 'rpm' && matrix.image != '' && steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        yum groupinstall -y 'Development Tools'
        dnf config-manager --set-enabled powertools || true # enable devel packages on rockylinux:8
        dnf config-manager --set-enabled crb || true # enable devel packages on rockylinux:9
        yum install -y libyaml-devel zlib-devel
        yum install -y cpanminus || (yum install -y perl && curl -L https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm | perl - App::cpanminus) # amazonlinux2023 removed cpanminus
        # required for openssl 3.x config
        cpanm IPC/Cmd.pm

    - name: Build Kong
      if: steps.cache-deps.outputs.cache-hit != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
        bazel build --config release //build:kong --verbose_failures ${{ matrix.bazel-args }}

    - name: Package Kong - ${{ matrix.package }}
      if: matrix.package != 'rpm' && steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        bazel build --config release :kong_${{ matrix.package }} --verbose_failures ${{ matrix.bazel-args }}

        for package in bazel-bin/pkg/*.*; do
          dpkg-deb -f "${package}" || tar -Oxf "${package}" .PKGINFO || true
        done

    - name: Package Kong - rpm
      if: matrix.package == 'rpm' && steps.cache-deps.outputs.cache-hit != 'true'
      env:
        RELEASE_SIGNING_GPG_KEY: ${{ secrets.RELEASE_SIGNING_GPG_KEY }}
        NFPM_RPM_PASSPHRASE: ${{ secrets.RELEASE_SIGNING_GPG_KEY_PASSPHRASE }}
      run: |
        if [ -n "${RELEASE_SIGNING_GPG_KEY:-}" ]; then
          RPM_SIGNING_KEY_FILE=$(mktemp)
          echo "$RELEASE_SIGNING_GPG_KEY" > $RPM_SIGNING_KEY_FILE
          export RPM_SIGNING_KEY_FILE=$RPM_SIGNING_KEY_FILE
        fi

        bazel build --config release :kong_${{ matrix.package-type }} --action_env=RPM_SIGNING_KEY_FILE --action_env=NFPM_RPM_PASSPHRASE ${{ matrix.bazel-args }}

        for package in bazel-bin/pkg/*.*; do
          rpm -qipR "${package}" || true
        done

    - name: Bazel Debug Outputs
      if: failure()
      run: |
        tail -n500 git-*/config.log || true
        tail -n500 bazel-out/_tmp/actions/std* || true
        sudo dmesg || true
        find bazel-*/ -name '*.log' | xargs tail -n500 || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.label }}-packages
        path: bazel-bin/pkg
        retention-days: 3

  verify-manifest-packages:
    needs: [metadata, build-packages]
    name: Verify Manifest - Package ${{ matrix.label }}
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-packages'] }}"

    steps:
    - uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.label }}-packages
        path: bazel-bin/pkg

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Verify
      run: |
        cd scripts/explain_manifest
        pip install -r requirements.txt
        pkg=$(ls ../../bazel-bin/pkg/kong* |head -n1)

        python ./main.py -f filelist.txt -p $pkg -o test.txt -s ${{ matrix.check-manifest-suite }}

  test-packages:
    name: API Test Packages - ${{ matrix.label }}
    needs: [metadata, build-packages]
    # cancel previous runs if new commits are pushed to the PR, but run for each commit on master
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ matrix.label }}-test-packages
      cancel-in-progress: true
    uses: ./.github/workflows/gateway-api-tests-matrix.yml
    strategy:
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-packages'] }}"
    with:
      gateway_version: ${{ needs.metadata.outputs.kong-version }}
      # if deploy-environment is release run all package tests else run only ubuntu-22.04 package tests
      target_package: ${{ matrix.label }}
      package_install_method: artifact
      target_matrix: package
      target_test: smoke
      send_slack_results: 'false'
    secrets: inherit

  build-images:

    permissions:
      pull-requests: write
      contents: write # Comment on Commit
      id-token: write # needed for signing the images with GitHub OIDC Token

    name: Build Images - ${{ matrix.label }}
    needs: [metadata, build-packages]
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"
    steps:
    - uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact-from }}-packages
        path: bazel-bin/pkg

    - name: Download artifact (alt)
      if: matrix.artifact-from-alt != ''
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact-from-alt }}-packages
        path: bazel-bin/pkg

    - name: Login to Docker Hub
      if: ${{ env.HAS_ACCESS_TO_GITHUB_TOKEN == 'true' }}
      uses: docker/login-action@3d58c274f17dffee475a5520cbe67f0a882c4dbb # v2.1.0
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      env:
        DOCKER_METADATA_PR_HEAD_SHA: true
      with:
        images: ${{ env.PRERELEASE_DOCKER_REPOSITORY }}
        sep-tags: ","
        tags: |
          type=raw,${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}
          type=raw,enable=${{ matrix.label == 'ubuntu' }},${{ needs.metadata.outputs.commit-sha }}

    - name: Set up QEMU
      if: matrix.docker-platforms != ''
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set Docker build args
      id: docker_build_args
      run: |
        platforms="${{ matrix.docker-platforms }}"
        if [[ -z "$platforms" ]]; then
          platforms="linux/amd64"
        fi
        echo "platforms=$platforms" >> $GITHUB_OUTPUT

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      id: image
      with:
        file: build/dockerfiles/${{ matrix.package }}.Dockerfile
        context: .
        push: true
        pull: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ steps.docker_build_args.outputs.platforms }}
        build-args: |
          KONG_BASE_IMAGE=${{ matrix.base-image }}
          KONG_ARTIFACT_PATH=bazel-bin/pkg/
          KONG_VERSION=${{ needs.metadata.outputs.kong-version }}
          PACKAGE_DISTRO=${{ matrix.package-distro }}
          EE_PORTS=8002 8445 8003 8446 8004 8447

        # these 2 options are needed so that the MediaType of the manifest is
        # OCI-compliant for other downstream integrations
        # see also:
        #   - https://github.com/docker/buildx/issues/1507
        #   - https://github.com/docker/buildx/issues/1509#issuecomment-1378538197
        provenance: false
        outputs: type=image,oci-mediatypes=true

    # Keyless container image signing
    # Pre-release tag (kong/kong-gateway-dev) is signed
    # This will sign images recursively for all platforms by digest and Not per tag for each unique image repository
    # Publishes signature to the private kong/notary-internal container registry
    # Publish permanent entry to Sigstore Public Rekor - Transparency log
    # Note:
      ## For private repos, no good solution is available for transparency requirement for SLSA.
      ## Hence exposing repo name and workflow details and commit details by leveraging public sigstore instance
    - name: Sign Prerelease Container Images
      id: sign_prerelease_images
      if: ${{ env.HAS_ACCESS_TO_GITHUB_TOKEN == 'true' && steps.image.outputs.digest != '' && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository)) }}
      uses: Kong/public-shared-actions/security-actions/sign-docker-image@590c699fe824010d7d563a33cc60500d847d3f9e
      with:
        image_digest: ${{ steps.image.outputs.digest }}
        tags: ${{ steps.meta.outputs.tags }}
        registry_username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        registry_password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}
        signature_registry: ${{ env.NOTARY_REPOSITORY }}
      env:
        NOTARY_REPOSITORY: kong/notary-internal

    # Aggregate the list of images from the image build step because:
    #   GHA limiatations doesn't allow aggregated output list:
    #     https://github.com/actions/runner/pull/2477?
    #   GHA limiatations doesn't support dynamic output keys for matrix jobs
    - uses: cloudposse/github-action-matrix-outputs-write@ed06cf3a6bf23b8dce36d1cf0d63123885bb8375
      id: write-prerelease-provenance-metadata
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.label }}
        outputs: |-
          label: ${{ matrix.label }}
          image: ${{ env.PRERELEASE_DOCKER_REPOSITORY }}
          digest: ${{ steps.image.outputs.digest }}
          tags: ${{ toJson(steps.meta.outputs.tags) }}

    - name: Comment on commit
      if: github.event_name == 'push' && matrix.label == 'ubuntu'
      uses: peter-evans/commit-comment@5a6f8285b8f2e8376e41fe1b563db48e6cf78c09 # v3.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ### Bazel Build
          Docker image available `${{ env.PRERELEASE_DOCKER_REPOSITORY }}:${{ needs.metadata.outputs.commit-sha }}`
          Artifacts available https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  verify-manifest-images:
    needs: [metadata, build-images]
    name: Verify Manifest - Image ${{ matrix.label }}
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    if: github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')

    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"

    steps:
    - uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Verify
      run: |
        cd scripts/explain_manifest
        # docker image verify requires sudo to set correct permissions, so we
        # also install deps for root
        sudo -E pip install -r requirements.txt
        IMAGE=${{ env.PRERELEASE_DOCKER_REPOSITORY }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}

        sudo -E python ./main.py --image $IMAGE -f docker_image_filelist.txt -s docker-image

        if [[ ! -z "${{ matrix.docker-platforms }}" ]]; then
          DOCKER_DEFAULT_PLATFORM=linux/arm64 sudo -E python ./main.py --image $IMAGE -f docker_image_filelist.txt -s docker-image
        fi

  scan-images:
    name: Scan Images - ${{ matrix.label }}
    needs: [metadata, build-images]
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    if: github.repository_owner == 'Kong'
    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"

    steps:
    - name: Install regctl
      uses: regclient/actions/regctl-installer@main

    - name: Login to Docker Hub
      if: ${{ env.HAS_ACCESS_TO_GITHUB_TOKEN }}
      uses: docker/login-action@3d58c274f17dffee475a5520cbe67f0a882c4dbb # v2.1.0
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}

    - name: Parse Architecture Specific Image Manifest Digests
      id: image_manifest_metadata
      run: |
        IMAGE=${{ env.PRERELEASE_DOCKER_REPOSITORY }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}

        archs="${{ matrix.docker-platforms }}"
        if [[ -z "$archs" ]]; then
          archs="linux/amd64"
        fi

        for arch in $(echo "$archs" | sed -e 's/,/ /g'); do
          arch=${arch#*/}
          echo "Fetching digest for ${arch}..."
          sha="$(regctl image digest "${IMAGE}" --platform linux/${arch})"
          echo "${arch}_image_sha=${IMAGE}@${sha}"
          echo "${arch}_image_sha=${IMAGE}@${sha}" >> $GITHUB_OUTPUT
        done

    - name: Scan AMD64 Image digest
      if: ${{ steps.image_manifest_metadata.outputs.amd64_image_sha != '' }}
      id: sbom_action_amd64
      uses: Kong/public-shared-actions/security-actions/scan-docker-image@590c699fe824010d7d563a33cc60500d847d3f9e
      with:
        asset_prefix: kong-${{ needs.metadata.outputs.gh-release-tag-name }}-${{ matrix.label }}-linux-amd64
        image: ${{ needs.metadata.outputs.prerelease-docker-repository }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}

    - name: Scan ARM64 Image digest
      if: ${{ steps.image_manifest_metadata.outputs.arm64_image_sha != '' }}
      id: sbom_action_arm64
      uses: Kong/public-shared-actions/security-actions/scan-docker-image@590c699fe824010d7d563a33cc60500d847d3f9e
      with:
        asset_prefix: kong-${{ needs.metadata.outputs.gh-release-tag-name }}-${{ matrix.label }}-linux-arm64
        image: ${{ needs.metadata.outputs.prerelease-docker-repository }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}

    - name: Upload SBOM assets
      # ensure that this does not run twice (once for the scheduled job,
      # another for the `nightly` tag push)
      if: |
        (startsWith(github.ref, 'refs/tags/') && github.ref_name != 'nightly') ||
        github.event.inputs.version == 'nightly'
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      uses: softprops/action-gh-release@v2
      with:
        name: "${{ needs.metadata.outputs.gh-release-name }}"
        body: "${{ needs.metadata.outputs.gh-release-name }} ${{ needs.metadata.outputs.release-label }}"
        tag_name: "${{ needs.metadata.outputs.gh-release-tag-name }}"
        prerelease: true
        files: |
            kong-*-${{ matrix.label }}-linux-*-cis-report.json
            kong-*-${{ matrix.label }}-linux-*-cve-report.json
            kong-*-${{ matrix.label }}-linux-*-cve-report.sarif
            kong-*-${{ matrix.label }}-linux-*-sbom.cyclonedx.json
            kong-*-${{ matrix.label }}-linux-*-sbom.spdx.json

  test-images-smoke:
    name: Smoke Test Images - ${{ matrix.label }}
    needs: [metadata, build-images]
    # cancel previous runs if new commits are pushed to the PR, but run for each commit on master
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ matrix.label }}-smoke-test-images
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"
    uses: ./.github/workflows/gateway-api-tests.yml
    with:
      control_plane_image: ${{ needs.metadata.outputs.prerelease-docker-repository }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}
      multiarch: ${{ matrix.docker-platforms != '' && true || false }}
      target_test: smoke
    secrets: inherit

  test-images-e2e:
    name: E2E Tests - ${{ matrix.label }}
    needs: [metadata, build-images]
    # cancel previous runs if new commits are pushed to the PR, but run for each commit on master
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ matrix.label }}-e2e-test-images
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"
    uses: ./.github/workflows/gateway-api-tests.yml
    with:
      control_plane_image: ${{ needs.metadata.outputs.prerelease-docker-repository }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}
      multiarch: ${{ matrix.docker-platforms != '' && true || false }}
      target_test: non-smoke
    secrets: inherit

  release-packages:
    name: Release Packages - ${{ matrix.label }} - ${{ needs.metadata.outputs.release-desc }}
    needs: [metadata, build-packages, build-images, test-packages, test-images-smoke, test-images-e2e]
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    if: github.repository_owner == 'Kong' && fromJSON(needs.metadata.outputs.matrix)['release-packages'] != ''
    timeout-minutes: 5 # PULP takes a while to publish
    environment: ${{ needs.metadata.outputs.deploy-environment }}

    strategy:
      # limit to 3 jobs at a time
      max-parallel: 3
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['release-packages'] }}"

    steps:
    - uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact-from }}-packages
        path: bazel-bin/pkg

    - name: Set package architecture
      id: pkg-arch
      run: |
        arch='amd64'
        if [[ '${{ matrix.label }}' == *'arm64' ]]; then
          arch='arm64'
        fi
        echo "arch=$arch"
        echo "arch=$arch" >> $GITHUB_OUTPUT

    - name: Upload Packages
      env:
        ARCHITECTURE: ${{ steps.pkg-arch.outputs.arch }}
        OFFICIAL_RELEASE: ${{ github.event.inputs.official }}
        ARTIFACT_VERSION: ${{ matrix.artifact-version }}
        ARTIFACT_TYPE: ${{ matrix.artifact-type }}
        ARTIFACT: ${{ matrix.artifact }}
        INPUT_VERSION: ${{ github.event.inputs.version }}
        KONG_RELEASE_LABEL: ${{ needs.metadata.outputs.release-label }}
        PACKAGE_TYPE: ${{ matrix.package }}
        VERBOSE: ${{ runner.debug == '1' && '1' || '' }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        CLOUDSMITH_DRY_RUN: ''
        IGNORE_CLOUDSMITH_FAILURES: ${{ vars.IGNORE_CLOUDSMITH_FAILURES }}
        USE_CLOUDSMITH: ${{ vars.USE_CLOUDSMITH }}
      run: |
        # uploading package files with filenames that don't match the
        # architecture of their contents is a re-occuring problem for us
        #
        # this test fails the build if the architecture deduced from
        # matrix.label (in "Set package architecture" above) does not appear in
        # the matrix.aritfact field
        if echo "$ARTIFACT" | grep -v "$ARCHITECTURE"; then
          echo "::error:: mismatched matrix artifact and matrix label architrecures"
          echo 'failing to prevent upload of incorrectly named package file'
          exit 1
        fi

        sha256sum bazel-bin/pkg/*

        if [[ ${{ matrix.label }} == *-fips ]]; then
          # this is required for rpm and apk packages, but not for deb
          export KONG_PACKAGE_NAME_OVERRIDE=kong-enterprise-edition-fips
        fi

        # set the version input as tags passed to release-scripts
        # note: release-scripts rejects user tags if missing internal flag
        #
        # this can be a comma-sepratated list of tags to apply
        if [[ "$OFFICIAL_RELEASE" == 'false' ]]; then
          if echo "$INPUT_VERSION" | grep -qs -E 'rc|alpha|beta|nightly'; then
            PACKAGE_TAGS="$INPUT_VERSION"
            export PACKAGE_TAGS
          fi
        fi

        scripts/release-kong.sh

  release-images:
    permissions:
      contents: write # Comment on Commit
      id-token: write # needed for signing the images
    name: Release Images - ${{ matrix.label }} - ${{ needs.metadata.outputs.release-desc }}
    needs: [metadata, build-images, test-packages, test-images-smoke, test-images-e2e]
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    if: github.repository_owner == 'Kong' && fromJSON(needs.metadata.outputs.matrix)['release-images'] != ''

    strategy:
      # limit to 3 jobs at a time
      max-parallel: 3
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['release-images'] }}"

    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@3d58c274f17dffee475a5520cbe67f0a882c4dbb # v2.1.0
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ needs.metadata.outputs.docker-repository }}
          ${{ env.LEGACY_PRERELEASE_DOCKER_REPOSITORY }}
        sep-tags: " "
        # Following tags are selected:
        # latest, latest-{distro} (master only)
        # 1.2, 1.2-{distro} (if input.version starts with two digits)
        # {version}, {version}-{distro} (input.version can be "1.2.3.4" or "nightly")
        # {branch}, {branch}-{distro} (per commit build only)
        # {tag}, {tag}-{distro} (tag only)
        # pr-1234, pr-1234-{distro} (PR only)
        # 20230228, 20230228-{distro}  (input.version is "nightly")
        # {version}-20230228, {version}-20230228-{distro}  (input.version is set and not on master)
        tags: |
          type=raw,value=latest,enable=${{ matrix.label == 'ubuntu' && github.ref_name == 'master' }}
          type=raw,value=latest,enable=${{ matrix.label == 'ubuntu' && github.ref_name == 'master' }},suffix=
          type=match,enable=${{ github.event_name == 'workflow_dispatch' }},pattern=\d.\d,value=${{ github.event.inputs.version }}
          type=match,enable=${{ github.event_name == 'workflow_dispatch' && matrix.label == 'ubuntu' }},pattern=\d.\d,value=${{ github.event.inputs.version }},suffix=
          type=raw,enable=${{ github.event_name == 'workflow_dispatch' }},${{ github.event.inputs.version }}
          type=raw,enable=${{ github.event_name == 'workflow_dispatch' && matrix.label == 'ubuntu' }},${{ github.event.inputs.version }},suffix=
          type=ref,enable=${{ github.event_name != 'workflow_dispatch' }},event=branch
          type=ref,enable=${{ github.event_name != 'workflow_dispatch' && matrix.label == 'ubuntu' }},event=branch,suffix=
          type=ref,event=tag
          type=ref,enable=${{ matrix.label == 'ubuntu' }},event=tag,suffix=
          type=ref,event=pr
          type=raw,enable=${{ github.event.inputs.version == 'nightly' }},value={{date 'YYYYMMDD'}}
          type=raw,enable=${{ matrix.label == 'ubuntu' && github.event.inputs.version == 'nightly' }},value={{date 'YYYYMMDD'}},suffix=
          type=raw,enable=${{ github.ref_name != 'master' && github.event.inputs.version != '' }},value=${{ github.event.inputs.version }}-{{date 'YYYYMMDD'}}
        flavor: |
          latest=false
          suffix=-${{ matrix.label }}

    - name: Install regctl
      uses: regclient/actions/regctl-installer@main

    - name: Push Images
      id: release_images
      env:
        TAGS: "${{ steps.meta.outputs.tags }}"
      run: |
        PRERELEASE_IMAGE=${{ env.PRERELEASE_DOCKER_REPOSITORY }}:${{ needs.metadata.outputs.commit-sha }}-${{ matrix.label }}

        prerelease_image_digest="$(regctl image digest "${PRERELEASE_IMAGE}")"
        echo "prerelease_image_digest=$prerelease_image_digest" >> $GITHUB_OUTPUT

        docker pull $PRERELEASE_IMAGE
        for tag in $TAGS; do
          regctl -v debug image copy $PRERELEASE_IMAGE $tag
        done

      # Signing metadata for offcial and Internal repositories
      # `official` tags are calculated
      # `pre-release` tags pushed to `kong/kong-gateway-dev` is already previously signed and hence skipped to avoid duplicate signing
    - name: Set Attestation metadata
      if: ${{ github.event.inputs.official  == 'true' }}
      id: attestation_metadata
      env:
        DOCKER_METADATA_JSON: ${{ steps.meta.outputs.json }}
      run: |
        set -euox pipefail

        release_tags=$(echo "${DOCKER_METADATA_JSON}" | jq '.tags[]|select(.|contains("kong/kong-gateway:"))' | jq -sr '. | join(" ")')
        echo "RELEASE TAGS=${release_tags}"
        echo "release_tags=${release_tags}" >> $GITHUB_OUTPUT

    # Keyless container signing
    # This step will sign official images using digest for every platform
    # Publish signature to a public kong/notary docker repository
    # Publish permanent entry to Sigstore Public Rekor - Transaparency log
    # Note:
      ## For private repos, no good solution is available for transparency requirement for SLSA.
      ## Hence exposing repo name and workflow details and git ref by leveraging public sigstore instance
    - name: Sign release images
      id: sign_release_images
      if: ${{ github.event.inputs.official  == 'true' && steps.attestation_metadata.outputs.release_tags != '' && env.HAS_ACCESS_TO_GITHUB_TOKEN == 'true' && steps.release_images.outputs.prerelease_image_digest != '' && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository)) }}
      uses: Kong/public-shared-actions/security-actions/sign-docker-image@590c699fe824010d7d563a33cc60500d847d3f9e
      with:
        image_digest: ${{ steps.release_images.outputs.prerelease_image_digest }}
        tags: ${{ steps.attestation_metadata.outputs.release_tags }}
        registry_username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        registry_password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}
        signature_registry: ${{ env.NOTARY_REPOSITORY }}
      env:
        NOTARY_REPOSITORY: kong/notary

    # Workaround to aggregate the tags output from the image build step
    # GHA limiatations doesn't allow aggregated output list: https://github.com/actions/runner/pull/2477?
    # GHA limiatations doesn't support dynamic output keys for matrix jobs
    - uses: cloudposse/github-action-matrix-outputs-write@ed06cf3a6bf23b8dce36d1cf0d63123885bb8375
      if: >
        github.event.inputs.official  == 'true'
        && steps.attestation_metadata.outputs.release_tags != ''
        && env.HAS_ACCESS_TO_GITHUB_TOKEN == 'true'
        && steps.release_images.outputs.prerelease_image_digest != ''
        && (
          github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        )
      id: release-provenance-metadata
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.label }}
        outputs: |-
          label: ${{ matrix.label }}
          image: ${{ env.DOCKER_REPOSITORY }}
          digest: ${{ steps.release_images.outputs.prerelease_image_digest }}
          tags: ${{ toJson(steps.attestation_metadata.outputs.release_tags) }}


  # The provenance job is reusable workflow that:
  # Cannot be used as a step within other jobs
  # Cannot be used to pass ENV variables
  # GHA limitations don't allow dynamic output keys / expressions
  # Note: The `job` names for pre-release and release are hardcoded to collect matrix outputs
  provenance-metadata:
    name: Read provenance metadata
    needs: [metadata, build-images, release-images]
    runs-on: ${{ needs.metadata.outputs.release-runs-on }}
    if: github.repository_owner == 'Kong' && github.event_name != 'pull_request'
    outputs:
      build-images-provenance-result: ${{ steps.build-images-provenance-metadata.outputs.result }}
      release-images-provenance-result: ${{ steps.release-images-provenance-metadata.outputs.result }}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@33cac12fa9282a7230a418d859b93fdbc4f27b5a
        id: build-images-provenance-metadata
        with:
          matrix-step-name: build-images
      - run: |
          echo ${{ steps.build-images-provenance-metadata.outputs.result }}
      - uses: cloudposse/github-action-matrix-outputs-read@33cac12fa9282a7230a418d859b93fdbc4f27b5a
        if: ${{ github.event.inputs.official  == 'true' }}
        id: release-images-provenance-metadata
        with:
          matrix-step-name: release-images
      - run: |
          echo ${{ steps.release-images-provenance-metadata.outputs.result }}

  # Provenance job for build / pre-release images
  # SLSA generator is a reusable workflow
  # pull-request event is [not supported](https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#supported-triggers)
  # runs-on option is [not supported](https://github.com/orgs/community/discussions/25783)
  # ENV option is [not supported](https://github.com/orgs/community/discussions/26671)
  # Reusable workflow doesn't support exrernal COSIGN_REPOSITORY via input / env variable
  build-images-provenance:
    name: Build Images Provenance - ${{matrix.label}}
    needs: [metadata, provenance-metadata, build-images]
    if: >
      github.repository_owner == 'Kong'
      && fromJSON(needs.metadata.outputs.matrix)['build-images'] != ''
      && github.event_name != 'pull_request'
    strategy:
      # limit to 3 jobs at a time
      max-parallel: 3
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['build-images'] }}"
    permissions:
      id-token: write # needed for signing the images
      actions: read # For getting workflow run info to build provenance
      packages: write # Required for publishing provenance. Issue: https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#known-issues
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with:
      image: "${{ fromJSON(needs.provenance-metadata.outputs.build-images-provenance-result)['image'][matrix.label] }}"
      digest: "${{ fromJSON(needs.provenance-metadata.outputs.build-images-provenance-result)['digest'][matrix.label] }}"
      private-repository: true
      provenance-repository: "kong/notary-internal"
    secrets:
      registry-password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}
      registry-username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
      provenance-registry-username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
      provenance-registry-password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}

  # Provenance job for official release images
  # Provenqnce job for internal images are skipped
  # SLSA generator is a reusable workflow
  # pull-request event is [not supported](https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#supported-triggers)
  # runs-on option is [not supported](https://github.com/orgs/community/discussions/25783)
  # ENV option is [not supported](https://github.com/orgs/community/discussions/26671)
  # Reusable workflow doesn't support exrernal COSIGN_REPOSITORY via input / env variable
  release-images-provenance:
    name: Release Images Provenance - ${{matrix.label}}
    needs: [metadata, provenance-metadata, release-images]
    if: >
      github.event.inputs.official  == 'true'
      && github.repository_owner == 'Kong'
      && fromJSON(needs.metadata.outputs.matrix)['release-images'] != ''
      && github.event_name != 'pull_request'
    strategy:
      # limit to 3 jobs at a time
      max-parallel: 3
      fail-fast: false
      matrix:
        include: "${{ fromJSON(needs.metadata.outputs.matrix)['release-images'] }}"
    permissions:
      id-token: write # needed for signing the images
      actions: read # For getting workflow run info to build provenance
      packages: write # Required for publishing provenance. Issue: https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#known-issues
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with:
      image: "${{ fromJSON(needs.provenance-metadata.outputs.release-images-provenance-result)['image'][matrix.label] }}"
      digest: "${{ fromJSON(needs.provenance-metadata.outputs.release-images-provenance-result)['digest'][matrix.label] }}"
      private-repository: true
      provenance-repository: "kong/notary"
    secrets:
      registry-password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}
      registry-username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
      provenance-registry-username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
      provenance-registry-password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}


