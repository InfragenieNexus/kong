load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")
load("@kong_bindings//:variables.bzl", "KONG_VAR")

filegroup(
    name = "all_srcs",
    srcs = glob(
        include = ["**"],
        exclude = ["*.bazel"],
    ),
)

alias(
    name = "jq",
    actual = ":libjq",
    visibility = ["//visibility:public"],
)

configure_make(
    # jq creates `jq` binary so this name must not be `jq`
    # to avoid bazel creating a directory with same name
    name = "libjq",
    configure_command = "configure",
    configure_in_place = True,
    configure_options = select({
        "@kong//:aarch64-linux-anylibc-cross": [
            "--host=aarch64-linux",
        ],
        "@kong//:x86_64-linux-musl-cross": [
            "--host=x86_64-linux-musl",
        ],
        "//conditions:default": [],
    }) + [
        "--with-oniguruma=builtin",
        "--disable-maintainer-mode",
    ],
    env = select({
        "@platforms//os:macos": {
            # don't use rule_foreign_cc's libtool as archiver as it seems to be a bug
            # see https://github.com/bazelbuild/rules_foreign_cc/issues/947
            "AR": "/usr/bin/ar",
        },
        "//conditions:default": {},
    }),
    lib_source = ":all_srcs",
    linkopts = [
        "-Wl,-rpath,%s/kong/lib" % KONG_VAR["INSTALL_DESTDIR"],
    ],
    # out_lib_dir = "lib",
    out_include_dir = "",  # don't install headers
    out_shared_libs = select({
        "@platforms//os:macos": [
            "libjq.1.dylib",
            "libonig.5.dylib",
        ],
        "//conditions:default": [
            "libjq.so.1.0.4",
            "libonig.so.5.3.0",
        ],
    }),
    targets = [
        "-j" + KONG_VAR["NPROC"],
        "install -j" + KONG_VAR["NPROC"],
    ],
    visibility = ["//visibility:public"],
)
