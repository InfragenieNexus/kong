load("@kong_bindings//:variables.bzl", "KONG_VAR")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("//build:build_system.bzl", "get_workspace_name", "kong_genrule", "kong_install", "kong_rules_group", "kong_template_file")

exports_files([
    "package/nfpm.yaml",
    "package/nfpm.enterprise.yaml",
])

# C libraries

clib_deps = [
    "@openssl",
    "@libexpat",
    # EE only
    "@jq",
    "@libxml2",
    "@libxslt",
    "@passwdqc",
]

[
    kong_install(
        name = "install-%s" % get_workspace_name(k),
        src = k,
        prefix = "kong/lib" if k == "@passwdqc" else "kong",
    )
    for k in clib_deps
]

kong_install(
    name = "install-openssl-fips",
    src = "@openssl_fips",
    strip_path = "openssl_fips/openssl_fips/fipsmodule",
)

kong_install(
    name = "install-openssl-fips-conf",
    src = "@openssl_fips//:openssl_conf",
    strip_path = "openssl_fips",
)

kong_install(
    name = "install-kong-licensing",
    src = "@kong-licensing",
    prefix = "kong/lib",
    deps = [":install-openssl"],
)

kong_rules_group(
    name = "install-clibs",
    propagates = [
        ":install-%s" % get_workspace_name(k)
        for k in clib_deps
    ] + select({
        "@kong//:fips_flag": [
            ":install-openssl-fips",
            ":install-openssl-fips-conf",
        ],
        "//conditions:default": [],
    }) + select({
        "@kong//:licensing_flag": [
            ":install-kong-licensing",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

# OpenResty

kong_install(
    name = "install-openresty-luajit",
    src = "@openresty//:luajit",
    prefix = "openresty/luajit",
)

kong_install(
    name = "install-openresty",
    src = "@openresty",
    prefix = "openresty",
    deps = [
        ":install-openresty-luajit",
        ":install-openssl",
    ],
)

kong_genrule(
    name = "dev-make-openresty",
    srcs = [
        "@openresty//:dev-just-make",
    ],
    outs = [
        "openresty.dev.nop",
    ],
    cmd = """
        rm -rf ${BUILD_DESTDIR}/openresty
        cp -r $(location @openresty//:dev-just-make) ${BUILD_DESTDIR}/openresty
        chmod -R "u+rw" ${BUILD_DESTDIR}/openresty
        touch ${BUILD_DESTDIR}/openresty.dev.nop
    """,
    visibility = ["//visibility:public"],
)

# Lua Libraries

lualib_deps = [
    "@lua-kong-nginx-module//:lualib_srcs",
    "@lua-resty-lmdb//:lualib_srcs",
    "@lua-resty-events//:lualib_srcs",
    "@lua-resty-websocket//:lualib_srcs",
    "@atc_router//:lualib_srcs",
]

kong_install(
    name = "install-atc-router",
    src = "@atc_router",
    prefix = "openresty/site/lualib",
    strip_path = "atc_router",
)

[
    kong_install(
        name = "install-%s-lualib" % get_workspace_name(k),
        src = k,
        prefix = "openresty/site/lualib",
        strip_path = get_workspace_name(k) + (
            "/lualib" if k in [
                "@lua-kong-nginx-module//:lualib_srcs",
                "@lua-resty-events//:lualib_srcs",
            ] else "/lib"
        ),
    )
    for k in lualib_deps
]

kong_rules_group(
    name = "install-lualibs",
    propagates = [
        ":install-atc-router",
    ] + [
        "install-%s-lualib" % get_workspace_name(k)
        for k in lualib_deps
    ],
)

# WasmX

kong_install(
    name = "install-ngx-wasmx-module-lualib",
    src = "@ngx_wasmx_module//:lualib_srcs",
    prefix = "openresty/site/lualib",
    strip_path = "ngx_wasmx_module/lib",
)

kong_rules_group(
    name = "install-wasmx",
    propagates = select({
        "@kong//:wasmx_flag": [
            ":install-ngx-wasmx-module-lualib",
        ],
        "//conditions:default": [],
    }),
)

# Tools

kong_install(
    name = "install-curl",
    src = "@curl",
    prefix = "kong-tools",
    deps = [":install-openssl"],
)

kong_install(
    name = "install-curl-cacerts",
    src = "@curl//:cacerts",
    prefix = "kong-tools",
    strip_path = "curl",
)

kong_rules_group(
    name = "install-tools",
    propagates = selects.with_or({
        "//conditions:default": [
            ":install-curl",
            ":install-curl-cacerts",
        ],
        (
            "@kong//:skip_tools_flag",
            "@platforms//os:macos",
        ): [],
    }),
)

# Static Files

kong_install(
    name = "install-webui-dists",
    src = "@kong_admin_gui//:dist",
    prefix = "kong/gui",
)

kong_install(
    name = "install-portal-dists",
    src = "@kong_portal//:dist",
    prefix = "kong/portal",
    strip_path = "kong_portal/dist",
)

kong_install(
    name = "install-protobuf-headers",
    src = "@protoc//:include",
    prefix = "kong/include",
)

kong_rules_group(
    name = "install-static-assets",
    propagates = [
        ":install-protobuf-headers",
    ] + select({
        "//conditions:default": [
            ":install-webui-dists",
            ":install-portal-dists",
        ],
        "@kong//:skip_webui_flags": [],
    }),
    visibility = ["//visibility:public"],
)

# Wrap up : )

kong_rules_group(
    name = "install",
    propagates = [
        ":install-clibs",
        ":install-lualibs",
        ":install-wasmx",
        ":install-openresty",
        ":install-static-assets",
        ":install-tools",
    ],
    visibility = ["//visibility:public"],
)

kong_genrule(
    name = "kong",
    srcs = [
        ":install",
        "@luarocks//:luarocks_make",
        "@luarocks//:luarocks_target",
        # EE in-place modifications
        "//build/ee:luarocks_install_ee_plugins",
        "//build/ee:copy_distributions_constants",
        "//build/ee:bytecode_compile",
        # EE new files
        "//build/ee:luarocks_license",
    ],
    outs = [
        "bin/luarocks",
        "etc/kong/kong.conf.default",
        "etc/luarocks",
        "kong/manifest.json",
        "lib",
        "share",
    ],
    cmd =
        """ set -e
        chmod -R "u+rw" ${BUILD_DESTDIR}/openresty

        rm -rf ${BUILD_DESTDIR}/share ${BUILD_DESTDIR}/lib ${BUILD_DESTDIR}/etc
        LUAROCKS=${WORKSPACE_PATH}/$(dirname '$(location @luarocks//:luarocks_make)')/luarocks_tree
        cp -r ${LUAROCKS}/share ${LUAROCKS}/lib ${LUAROCKS}/etc ${BUILD_DESTDIR}/.
        cp ${LUAROCKS}/bin/luarocks ${BUILD_DESTDIR}/bin/.
        chmod -R "u+rw" ${BUILD_DESTDIR}/share/lua

        mkdir -p ${BUILD_DESTDIR}/etc/kong/
        cp ${WORKSPACE_PATH}/kong.conf.default ${BUILD_DESTDIR}/etc/kong/kong.conf.default

        # housecleaning
        if [[ -d ${BUILD_DESTDIR}/kong/lib64 ]]; then
            cp -r ${BUILD_DESTDIR}/kong/lib64/* ${BUILD_DESTDIR}/kong/lib/.
            rm -rf ${BUILD_DESTDIR}/kong/lib64
        fi

        # clean empty directory
        find ${BUILD_DESTDIR} -empty -type d -delete

        # EE

        # files under prefix are symlinks, so we copy the actual files to be consumable by nfpm
        cp ${WORKSPACE_PATH}/LICENSE ${BUILD_DESTDIR}/LICENSE
        cp ${WORKSPACE_PATH}/COPYRIGHT ${BUILD_DESTDIR}/COPYRIGHT

        cp $(location //build/ee:luarocks_license) ${BUILD_DESTDIR}/kong/manifest.json

        # create empty folder to make nfpm happy when skip_tools is set to True
        mkdir -p ${BUILD_DESTDIR}/kong-tools
        chmod -R "u+rw" ${BUILD_DESTDIR}/kong-tools
    """,
    visibility = ["//visibility:public"],
)

kong_template_file(
    name = "venv.sh",
    output = "%s-venv.sh" % KONG_VAR["BUILD_NAME"],
    substitutions = {
        "{{build_name}}": KONG_VAR["BUILD_NAME"],
        "{{workspace_path}}": KONG_VAR["WORKSPACE_PATH"],
    },
    template = "//build:templates/venv.sh",
)

kong_template_file(
    name = "venv.fish",
    output = "%s-venv.fish" % KONG_VAR["BUILD_NAME"],
    substitutions = {
        "{{build_name}}": KONG_VAR["BUILD_NAME"],
        "{{workspace_path}}": KONG_VAR["WORKSPACE_PATH"],
    },
    template = "//build:templates/venv.fish",
)

kong_template_file(
    name = "venv-commons",
    is_executable = True,
    output = "%s-venv/lib/venv-commons" % KONG_VAR["BUILD_NAME"],
    substitutions = {
        "{{workspace_path}}": KONG_VAR["WORKSPACE_PATH"],
    },
    template = "//build:templates/venv-commons",
)

kong_rules_group(
    name = "venv",
    propagates = [
        ":kong",
        ":venv.sh",
        ":venv.fish",
        ":venv-commons",
    ],
    visibility = ["//visibility:public"],
)
